// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PortMessage struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortMessage) Reset()         { *m = PortMessage{} }
func (m *PortMessage) String() string { return proto.CompactTextString(m) }
func (*PortMessage) ProtoMessage()    {}
func (*PortMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cdb71a8a51d437ba, []int{0}
}
func (m *PortMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortMessage.Unmarshal(m, b)
}
func (m *PortMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortMessage.Marshal(b, m, deterministic)
}
func (dst *PortMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortMessage.Merge(dst, src)
}
func (m *PortMessage) XXX_Size() int {
	return xxx_messageInfo_PortMessage.Size(m)
}
func (m *PortMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PortMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PortMessage proto.InternalMessageInfo

func (m *PortMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PortIDMessage struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortIDMessage) Reset()         { *m = PortIDMessage{} }
func (m *PortIDMessage) String() string { return proto.CompactTextString(m) }
func (*PortIDMessage) ProtoMessage()    {}
func (*PortIDMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_cdb71a8a51d437ba, []int{1}
}
func (m *PortIDMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortIDMessage.Unmarshal(m, b)
}
func (m *PortIDMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortIDMessage.Marshal(b, m, deterministic)
}
func (dst *PortIDMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortIDMessage.Merge(dst, src)
}
func (m *PortIDMessage) XXX_Size() int {
	return xxx_messageInfo_PortIDMessage.Size(m)
}
func (m *PortIDMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PortIDMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PortIDMessage proto.InternalMessageInfo

func (m *PortIDMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*PortMessage)(nil), "api.PortMessage")
	proto.RegisterType((*PortIDMessage)(nil), "api.PortIDMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PortClient is the client API for Port service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortClient interface {
	SavePort(ctx context.Context, in *PortMessage, opts ...grpc.CallOption) (*PortMessage, error)
	GetPort(ctx context.Context, in *PortIDMessage, opts ...grpc.CallOption) (*PortMessage, error)
}

type portClient struct {
	cc *grpc.ClientConn
}

func NewPortClient(cc *grpc.ClientConn) PortClient {
	return &portClient{cc}
}

func (c *portClient) SavePort(ctx context.Context, in *PortMessage, opts ...grpc.CallOption) (*PortMessage, error) {
	out := new(PortMessage)
	err := c.cc.Invoke(ctx, "/api.Port/SavePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPort(ctx context.Context, in *PortIDMessage, opts ...grpc.CallOption) (*PortMessage, error) {
	out := new(PortMessage)
	err := c.cc.Invoke(ctx, "/api.Port/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServer is the server API for Port service.
type PortServer interface {
	SavePort(context.Context, *PortMessage) (*PortMessage, error)
	GetPort(context.Context, *PortIDMessage) (*PortMessage, error)
}

func RegisterPortServer(s *grpc.Server, srv PortServer) {
	s.RegisterService(&_Port_serviceDesc, srv)
}

func _Port_SavePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).SavePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Port/SavePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).SavePort(ctx, req.(*PortMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Port/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPort(ctx, req.(*PortIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Port_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Port",
	HandlerType: (*PortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePort",
			Handler:    _Port_SavePort_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _Port_GetPort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_cdb71a8a51d437ba) }

var fileDescriptor_api_cdb71a8a51d437ba = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x06, 0x32, 0x95, 0x14, 0xb9, 0xb8, 0x03, 0xf2, 0x8b,
	0x4a, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0x25, 0x79, 0x2e, 0x5e, 0x90, 0x12, 0x4f,
	0x17, 0x98, 0x22, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0xb0, 0x12, 0xce, 0x20, 0x20, 0xcb, 0x28, 0x9b,
	0x8b, 0x05, 0xa4, 0x40, 0xc8, 0x80, 0x8b, 0x23, 0x38, 0xb1, 0x2c, 0x15, 0xcc, 0x16, 0xd0, 0x03,
	0x59, 0x84, 0x64, 0xb4, 0x14, 0x86, 0x88, 0x12, 0x83, 0x90, 0x21, 0x17, 0xbb, 0x7b, 0x6a, 0x09,
	0x58, 0x83, 0x10, 0x5c, 0x1a, 0x6e, 0x11, 0x36, 0x2d, 0x49, 0x6c, 0x60, 0xc7, 0x1b, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xcf, 0x6c, 0xf8, 0xde, 0xc9, 0x00, 0x00, 0x00,
}
